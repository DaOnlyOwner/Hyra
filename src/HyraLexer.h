// ../src/HyraLexer.h generated by reflex 1.0.3 from token_hyra.l

#ifndef REFLEX_HEADER_H
#define REFLEX_HEADER_H
#define IN_HEADER 1

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_dotall              true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         ../src/HyraLexer.h
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               HyraLexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             ../src/HyraLexer.cpp
#define REFLEX_OPTION_tabs                8

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


    #include "TokenDefinitions.h"
    #define RET_TOKEN(token) return Tokens:: token


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class HyraLexer : public reflex::AbstractLexer<reflex::Matcher> {

TokenInformation peekTokenInfo;
TokenInformation currentTokenInfo;
public:
const TokenInformation& Eat()
{
    currentTokenInfo = peekTokenInfo;
    auto peekToken = lex();
    peekTokenInfo = {lex(), str(), lineno(), columno()};
    return currentTokenInfo;
}
const TokenInformation& Peek()
{
    return peekTokenInfo;
}
const TokenInformation& Current()
{
    return currentTokenInfo;
}

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  HyraLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {

Eat();

  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

#endif
