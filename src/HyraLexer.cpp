// ../src/HyraLexer.cpp generated by reflex 1.0.3 from token_hyra.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_dotall              true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_header_file         ../src/HyraLexer.h
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               HyraLexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             ../src/HyraLexer.cpp
#define REFLEX_OPTION_tabs                8

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


    #include "TokenDefinitions.h"
    #define RET_TOKEN(token) return Tokens:: token


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class HyraLexer : public reflex::AbstractLexer<reflex::Matcher> {

TokenInformation peekTokenInfo;
public:
TokenInformation Eat()
{
    auto tmp = peekTokenInfo;
    auto peekToken = lex();
    peekTokenInfo = {peekToken, str(), lineno(), columno()};
    return tmp;
}
const TokenInformation& Peek()
{
    return peekTokenInfo;
}
void Init()
{
    Eat();
}

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  HyraLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int HyraLexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this, "T=8"));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
RET_TOKEN(EOF_);
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 28: ^\h+
            break;
          case 2: // rule at line 29: \j
RET_TOKEN(BlockEnd);
            break;
          case 3: // rule at line 30: if
RET_TOKEN(KW_if);
            break;
          case 4: // rule at line 31: elif
RET_TOKEN(KW_elif);
            break;
          case 5: // rule at line 32: else
RET_TOKEN(KW_else);
            break;
          case 6: // rule at line 33: while
RET_TOKEN(KW_while);
            break;
          case 7: // rule at line 34: and
RET_TOKEN(KW_and);
            break;
          case 8: // rule at line 35: or
RET_TOKEN(KW_or);
            break;
          case 9: // rule at line 36: xor
RET_TOKEN(KW_xor);
            break;
          case 10: // rule at line 37: not
RET_TOKEN(KW_not);
            break;
          case 11: // rule at line 38: u8
RET_TOKEN(KW_u8);
            break;
          case 12: // rule at line 39: u16
RET_TOKEN(KW_u16);
            break;
          case 13: // rule at line 40: u32
RET_TOKEN(KW_u32);
            break;
          case 14: // rule at line 41: u64
RET_TOKEN(KW_u64);
            break;
          case 15: // rule at line 42: f8
RET_TOKEN(KW_f8);
            break;
          case 16: // rule at line 43: f16
RET_TOKEN(KW_f16);
            break;
          case 17: // rule at line 44: f32
RET_TOKEN(KW_f32);
            break;
          case 18: // rule at line 45: s8
RET_TOKEN(KW_s8);
            break;
          case 19: // rule at line 46: s16
RET_TOKEN(KW_s16);
            break;
          case 20: // rule at line 47: s32
RET_TOKEN(KW_s32);
            break;
          case 21: // rule at line 48: s64
RET_TOKEN(KW_s64);
            break;
          case 22: // rule at line 49: (?:\Q+\E)
RET_TOKEN(OP_plus);
            break;
          case 23: // rule at line 50: (?:\Q-\E)
RET_TOKEN(OP_minus);
            break;
          case 24: // rule at line 51: (?:\Q*\E)
RET_TOKEN(OP_times);
            break;
          case 25: // rule at line 52: (?:\Q/\E)
RET_TOKEN(OP_div);
            break;
          case 26: // rule at line 53: ==
RET_TOKEN(OP_equals);
            break;
          case 27: // rule at line 54: !=
RET_TOKEN(OP_notEquals);
            break;
          case 28: // rule at line 55: <=
RET_TOKEN(OP_lesserThan);
            break;
          case 29: // rule at line 56: >=
RET_TOKEN(OP_greaterThan);
            break;
          case 30: // rule at line 57: =
RET_TOKEN(OP_assign);
            break;
          case 31: // rule at line 58: :
RET_TOKEN(SYM_colon);
            break;
          case 32: // rule at line 59: [0-9]+\.[0-9]+(?:f8|f16|f32)?
RET_TOKEN(LIT_float);
            break;
          case 33: // rule at line 60: [0-9]+(?:i64|i32|i16|i8)?
RET_TOKEN(LIT_integer);
            break;
          case 34: // rule at line 61: [0-9]+(?:f8|f16|f32)?
RET_TOKEN(LIT_float);
            break;
          case 35: // rule at line 62: [0-9A-Z_a-z]+
RET_TOKEN(Identifier);
            break;
          case 36: // rule at line 63: ^\h*\i
RET_TOKEN(BlockStart);
            break;
          case 37: // rule at line 64: ^\h*\j
RET_TOKEN(BlockEnd);
            break;
          case 38: // rule at line 65: (?:\Q(\E)
RET_TOKEN(SYM_lparen);
            break;
          case 39: // rule at line 66: (?:\Q)\E)
RET_TOKEN(SYM_rparen);
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = c0;
  m.FSM_INIT(c1);

S0:
  if (m.FSM_DENT()) goto S30;
  c0 = c1, c1 = m.FSM_CHAR();
  if (m.FSM_META_DED()) {
    m.FSM_TAKE(2, c1);
    if (m.FSM_META_BOL()) {
      m.FSM_TAKE(37, c1);
    }
  }
  else if (m.FSM_META_IND()) {
    if (m.FSM_META_BOL()) {
      m.FSM_TAKE(36, c1);
    }
  }
  if (c1 == 'x') goto S68;
  if (c1 == 'w') goto S47;
  if (c1 == 'u') goto S82;
  if (c1 == 's') goto S101;
  if (c1 == 'o') goto S61;
  if (c1 == 'n') goto S75;
  if (c1 == 'i') goto S33;
  if (c1 == 'f') goto S92;
  if (c1 == 'e') goto S40;
  if ('b' <= c1 && c1 <= 'z') goto S151;
  if (c1 == 'a') goto S54;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '>') goto S126;
  if (c1 == '=') goto S119;
  if (c1 == '<') goto S124;
  if (c1 == ':') goto S128;
  if ('0' <= c1 && c1 <= '9') goto S142;
  if (c1 == '/') goto S117;
  if (c1 == '-') goto S113;
  if (c1 == '+') goto S111;
  if (c1 == '*') goto S115;
  if (c1 == ')') goto S134;
  if (c1 == '(') goto S132;
  if (c1 == '!') goto S122;
  if (c1 == ' ') goto S136;
  if (c1 == '\t') goto S136;
  return m.FSM_HALT(c1);

S30:
  m.FSM_TAKE(2);
  c0 = c1, c1 = m.FSM_CHAR();
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(37, c1);
  }
  return m.FSM_HALT(c1);

S33:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S159;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S40:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S165;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S47:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S173;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S54:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S180;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S61:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S187;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S68:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S193;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S75:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S200;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S82:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '8') goto S207;
  if (c1 == '6') goto S227;
  if (c1 == '3') goto S220;
  if (c1 == '1') goto S213;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S92:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '8') goto S234;
  if (c1 == '3') goto S247;
  if (c1 == '1') goto S240;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S101:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '8') goto S254;
  if (c1 == '6') goto S274;
  if (c1 == '3') goto S267;
  if (c1 == '1') goto S260;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S111:
  m.FSM_TAKE(22);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S113:
  m.FSM_TAKE(23);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S115:
  m.FSM_TAKE(24);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S117:
  m.FSM_TAKE(25);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S119:
  m.FSM_TAKE(30);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '=') goto S281;
  return m.FSM_HALT(c1);

S122:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '=') goto S283;
  return m.FSM_HALT(c1);

S124:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '=') goto S285;
  return m.FSM_HALT(c1);

S126:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '=') goto S287;
  return m.FSM_HALT(c1);

S128:
  m.FSM_TAKE(31);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S130:
  c0 = c1, c1 = m.FSM_CHAR();
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(36, c1);
  }
  return m.FSM_HALT(c1);

S132:
  m.FSM_TAKE(38);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S134:
  m.FSM_TAKE(39);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S136:
  if (m.FSM_DENT()) goto S291;
  c0 = c1, c1 = m.FSM_CHAR();
  if (m.FSM_META_DED()) {
    if (m.FSM_META_BOL()) {
      m.FSM_TAKE(37, c1);
    }
  }
  else if (m.FSM_META_IND()) {
    if (m.FSM_META_BOL()) {
      m.FSM_TAKE(36, c1);
    }
  }
  else if (m.FSM_META_BOL()) {
    m.FSM_TAKE(1, c1);
  }
  if (c1 == ' ') goto S136;
  if (c1 == '\t') goto S136;
  return m.FSM_HALT(c1);

S142:
  m.FSM_TAKE(33);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S297;
  if (c1 == 'f') goto S307;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S142;
  if (c1 == '.') goto S295;
  return m.FSM_HALT(c1);

S151:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S157:
  m.FSM_TAKE(37);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S159:
  m.FSM_TAKE(3);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S165:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 's') goto S323;
  if (c1 == 'i') goto S316;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S173:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S330;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S180:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S337;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S187:
  m.FSM_TAKE(8);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S193:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S343;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S200:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 't') goto S349;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S207:
  m.FSM_TAKE(11);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S213:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '6') goto S355;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S220:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '2') goto S361;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S227:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '4') goto S367;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S234:
  m.FSM_TAKE(15);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S240:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '6') goto S373;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S247:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '2') goto S379;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S254:
  m.FSM_TAKE(18);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S260:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '6') goto S385;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S267:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '2') goto S391;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S274:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '4') goto S397;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S281:
  m.FSM_TAKE(26);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S283:
  m.FSM_TAKE(27);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S285:
  m.FSM_TAKE(28);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S287:
  m.FSM_TAKE(29);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S289:
  m.FSM_TAKE(36);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S291:
  c0 = c1, c1 = m.FSM_CHAR();
  if (m.FSM_META_BOL()) {
    m.FSM_TAKE(37, c1);
  }
  return m.FSM_HALT(c1);

S293:
  m.FSM_TAKE(1);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S295:
  c0 = c1, c1 = m.FSM_CHAR();
  if ('0' <= c1 && c1 <= '9') goto S403;
  return m.FSM_HALT(c1);

S297:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '8') goto S428;
  if (c1 == '6') goto S407;
  if (c1 == '3') goto S414;
  if (c1 == '1') goto S421;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S307:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '8') goto S434;
  if (c1 == '3') goto S447;
  if (c1 == '1') goto S440;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S316:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S454;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S323:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S460;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S330:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S466;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S337:
  m.FSM_TAKE(7);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S343:
  m.FSM_TAKE(9);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S349:
  m.FSM_TAKE(10);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S355:
  m.FSM_TAKE(12);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S361:
  m.FSM_TAKE(13);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S367:
  m.FSM_TAKE(14);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S373:
  m.FSM_TAKE(16);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S379:
  m.FSM_TAKE(17);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S385:
  m.FSM_TAKE(19);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S391:
  m.FSM_TAKE(20);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S397:
  m.FSM_TAKE(21);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S403:
  m.FSM_TAKE(32);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'f') goto S473;
  if ('0' <= c1 && c1 <= '9') goto S403;
  return m.FSM_HALT(c1);

S407:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '4') goto S428;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S414:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '2') goto S428;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S421:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '6') goto S428;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S428:
  m.FSM_TAKE(33);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S434:
  m.FSM_TAKE(34);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S440:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '6') goto S434;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S447:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if (c1 == '2') goto S434;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S454:
  m.FSM_TAKE(4);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S460:
  m.FSM_TAKE(5);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S466:
  m.FSM_TAKE(35);
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S477;
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S473:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '8') goto S483;
  if (c1 == '3') goto S487;
  if (c1 == '1') goto S485;
  return m.FSM_HALT(c1);

S477:
  m.FSM_TAKE(6);
  c0 = c1, c1 = m.FSM_CHAR();
  if ('a' <= c1 && c1 <= 'z') goto S151;
  if (c1 == '_') goto S151;
  if ('A' <= c1 && c1 <= 'Z') goto S151;
  if ('0' <= c1 && c1 <= '9') goto S151;
  return m.FSM_HALT(c1);

S483:
  m.FSM_TAKE(32);
  c0 = c1, c1 = m.FSM_CHAR();
  return m.FSM_HALT(c1);

S485:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '6') goto S483;
  return m.FSM_HALT(c1);

S487:
  c0 = c1, c1 = m.FSM_CHAR();
  if (c1 == '2') goto S483;
  return m.FSM_HALT(c1);
}

